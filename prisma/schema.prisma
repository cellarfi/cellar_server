// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Main Users table
model User {
  id                  String  @id
  email               String
  display_name        String
  tag_name            String
  profile_picture_url String?
  about               String? @db.Text()

  // All timestamps stored in UTC
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz

  // Relations
  address_book AddressBook[]
  sessions     Session[]
  Post         Post[]
  Comments     Comment[]
  Followers    Follower[]
  Following    Following[]
  Like         Like[]
  receivedTips Tip[] @relation("UserReceivedTips")
  givenTips    Tip[] @relation("UserGivenTips")

  @@unique([id, email])
  @@index([id, tag_name, display_name])
  @@map("users")
}

model Session {
  id              String       @id @default(cuid())
  user_id         String
  device_id       String       @unique // Unique device identifier
  expo_push_token String       @unique @db.VarChar(500)
  platform        String // 'ios', 'android', 'web', 'desktop'
  device_name     String? // User-friendly device name
  os_version      String? // Operating system version
  app_version     String? // App version
  device_model    String? // Device model (iPhone 12, Samsung Galaxy S21, etc.)
  agent           String? // Agent ID
  ip_address      String? // IP address of the device
  country         String? // Country of the device
  city            String? // City of the device
  status          DeviceStatus @default(ACTIVE)

  // All timestamps stored in UTC
  last_seen_at DateTime @default(now()) @db.Timestamptz
  created_at   DateTime @default(now()) @db.Timestamptz
  updated_at   DateTime @updatedAt @db.Timestamptz

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, device_id, status])
  @@index([user_id, status, last_seen_at])
  @@map("sessions")
}

model AddressBook {
  id          String   @id @default(cuid())
  user_id     String
  name        String
  address     String
  description String?
  network     String   @default("solana")
  is_favorite Boolean  @default(false)
  tags        String[]

  // All timestamps stored in UTC
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, address, name])
  @@index([user_id, name])
  @@map("address_book")
}

enum DeviceStatus {
  ACTIVE
  SIGNED_OUT
  REVOKED
}

model Post {
  id       String  @id @default(uuid())
  message  String
  ownerId  String?
  likes    Int     @default(0)
  comments Int     @default(0)
  hashtag Json?

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  // Relations
  user    User?     @relation(fields: [ownerId], references: [id])
  like    Like[]
  comment Comment[]
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  // Relations 
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  text      String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  // Relations 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Tip {
  id        String   @id @default(uuid())
  userId    String
  tipper    String
  amount    Int
  createdAt DateTime @default(now()) @db.Timestamptz()

  // Relations
  user       User @relation("UserReceivedTips", fields: [userId], references: [id], onDelete: Cascade)
  tipperUser User @relation("UserGivenTips", fields: [tipper], references: [id], onDelete: Cascade)
}

model Follower {
  id         String   @id @default(uuid())
  userId     String
  followerId String
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @updatedAt @db.Timestamptz

  // Relations 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Following {
  id        String @id @default(uuid())
  userId    String
  follwerId String

  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  // Relations 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
